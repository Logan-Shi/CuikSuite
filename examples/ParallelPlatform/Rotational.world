/** \cond */
[CONSTANTS]


% minimum extension of the legs
rho1:= 2.5 

% maximum extension of the legs
rho2:=rho1+2.5

% length of the central leg
rho3:= 3.7

% beg leg
rho4:= 7
rbeg:=0.04 % nominal value 0.04 max 0.235
% rbeg:=0.23 % nominal value 0.04 max 0.235

% Now we define the base and the platforma as equilater triangles
% with the given parameters

% Base Points (wrt the base reference frame)
% (this must correspond with the points in bodies/triangleR1)
a1x := 1.5
a1y := 0
a1z := 0

a2x := -0.75
a2y :=  1.3
a2z := 0

a3x := -0.75
a3y := -1.3
a3z := 0

% Platform Points (wrt the platform reference frame)
% (this must correspond with the points in bodies/triangleR2)
b1x := 1.5
b1y := 0
b1z := 0

b2x := -0.75
b2y :=  1.3
b2z := 0

b3x := -0.75
b3y := -1.3
b3z := 0

[LINKS]

base     : body "bodies/triangleR1" color (0.25,0.25,0)
	   cylinder 0.1 (0,0,0) (0,0,rho3) color (0.75,0.1,0.1)
	   sphere 0.2 (0,0,rho3) color (0.9,0.9,0)

platform : body "bodies/triangleR2" color (0.25,0.25,0) decoration
	   cylinder rbeg (0,0,0)  (0,0,rho4) color (0.1,0.9,0.1)

[JOINTS]

spherical :  base     (0,0,rho3)
             platform (0,0,0)
             range [pi/3] +(0,0,1) +(0,0,1)

sph_prs_sph leg1: base     (a1x,a1y,a1z)
	          platform (b1x,b1y,b1z)
	          range    [rho1,rho2]
	          radius   0.15
	          color    (0.9,0.9,0.9)

sph_prs_sph leg2 : base     (a2x,a2y,a2z)
	           platform (b2x,b2y,b2z)
	           range    [rho1,rho2]
	           radius   0.15
	           color    (0.9,0.9,0.9)

sph_prs_sph leg3 : base     (a3x,a3y,a3z)
	           platform (b3x,b3y,b3z)
	           range    [rho1,rho2]
	           radius   0.15
	           color    (0.9,0.9,0.9)

[OBSTACLES]

  obs1: body "bodies/obstacleR1" color (0.1,0.1,0.9)
  obs2: body "bodies/obstacleR2" color (0.1,0.1,0.9)
  obs3: body "bodies/obstacleR3" color (0.1,0.1,0.9)
  obs4: body "bodies/obstacleR4" color (0.1,0.1,0.9)
  obs5: body "bodies/obstacleR5" color (0.1,0.1,0.9) hidden
  obs6: body "bodies/obstacleR6" color (0.1,0.1,0.9) hidden


[COLLISIONS]

  Do Not Check : all
  Check: platform,obs1
  Check: platform,obs2
  Check: platform,obs3
  Check: platform,obs4
  Check: platform,obs5
  Check: platform,obs6

/** \endcond */

/** \file Rotational.world

   \brief A rotational-only \ref examples/ParallelPlatform "parallel platform". 

   <center>
   <img src="../images/ParallelPlatform/rotational.png">
   </center>
   
   A highly contrained parallel platform so that it only has rotational degrees of freedom.
   We took this example form <a href="http://www.laas.fr/~jcortes/">Juan Cortés</a> 
   as a test for our path planner.
  
   We used this example in our <a href="http://www.iri.upc.edu/people/porta/Docs/ijrr12.pdf">IJRR-12</a> 
   paper.

   The key data for this problem are:
   <center>
   <table>
     <tr>
       <th>Ambient space dimension</th> <td align="center"> 27 </td>
     </tr>
     <tr>
       <th>Configuration space dimension</th> <td align="center"> 3 </td>
     </tr>
     <tr>
       <th>Average planning time with \ref cuikatlasGBF.c  "bin/cuikatlasGBF" (in seconds)</th> <td align="center"> 0.7 </td>
     </tr>
   </table>
   </center>

   Note that these figures correspond to a redundant formulation of the problem. A non-redundant
   formulation produces lower dimensional ambient and configuration spaces, but this does not
   necessarily result in lower execution times.
   Moreover, we only consider collisions between the moved peg and the obstacles (in blue), but not
   self-collisions of the parellel mechanisms (leg crossing might occur in some cases).

   This example is treated following these steps (from the main CuikSuite folder):

     - <b>Adjust the parameters</b>: Different algorithms use different parameter settings. Just
       check the parameter file (Rotational.param) and uncomment the appropriate lines. Moreover,
       ensure that parameter \ref CT_REPRESENTATION "REPRESENTATION"  is set to LINKS (or just not set).
     - <b>Solve the path planning problem</b>: using the graph-based search
             - <i> \ref cuikatlasGBF.c "bin/cuikatlasGBF" examples/ParallelPlatform/Rotational</i>
             .
     - <b>An alternative way to solve the path planning problem</b>: using a RRT-like algorithm
             - <i> \ref cuikatlasrrt.c "bin/cuikatlasrrt" examples/ParallelPlatform/Rotational</i>
             .
     - <b>Solving with pre-existing methods</b>: Both methods are RRT-based
             - <i> \ref cuikcbirrt.c "bin/cuikcbirrt" examples/ParallelPlatform/Rotational</i>
             - <i> \ref cuikccrrt.c "bin/cuikccrrt" examples/ParallelPlatform/Rotational</i>
             .
     - <b>Visualize the solution path</b>:
             - <i> \ref cuikplay.c "scripts/cuikplayer" examples/ParallelPlatform/Rotational examples/ParallelPlatform/Rotational_path</i>
             .
     - <b>Smooth the path</b>:
             - <i> \ref cuiksmoothpath.c "bin/cuiksmoothpath" examples/ParallelPlatform/Rotational</i>
             .
     - <b>Visualize the smoothed path</b>:
             - <i> \ref cuikplay.c "scripts/cuikplayer" examples/ParallelPlatform/Rotational examples/ParallelPlatform/Rotational_path_s</i>
             .
     .

*/
