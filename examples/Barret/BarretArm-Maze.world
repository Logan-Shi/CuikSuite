/** \cond */

[CONSTANTS]

  % to facilitate fixing the arm configuration we
  % define its position as an angle plus a range
  % (the range is set to zero to fix the angle)

  theta1:=-Pi/15.4
  theta2:=Pi/2
  theta3:=-Pi/2
  theta4:=Pi/2
  theta5:=Pi
  theta6:=Pi/2
  theta7:=Pi

  range1:=0
  range2:=0
  range3:=0
  range4:=0
  range5:=0
  range6:=0
  range7:=0

  % color for the arm (sort of grey)
  cr:=0.6
  cg:=0.6
  cb:=0.6

[LINKS]

  % arm

  world

  maze: body  "bodies/hardMaze.off" 

  arm0: body "bodies/barret-arm-0.off" color (cr,cg,cb)

  arm1: body "bodies/barret-arm-1.off" color (cr,cg,cb)

  arm2: body "bodies/barret-arm-2.off" color (cr,cg,cb)

  arm3: body "bodies/barret-arm-3.off" color (cr,cg,cb) decoration
        cylinder 0.05 (0,0,0.05) (0,0,0.5) red

  arm4: body "bodies/barret-arm-4.off" color (cr,cg,cb) decoration
        cylinder 0.05 (-0.045,-0.05,0) (-0.045,-0.29,0) blue

  arm5: body "bodies/barret-arm-5.off" color (cr,cg,cb)

  arm6: body "bodies/barret-arm-6.off" color (cr,cg,cb)

  %rigid arm
  arm7: body "bodies/barret-fixHand-1.off" color (cr,cg,cb) decoration
        body "bodies/barret-fixHand-2.off" color (cr,cg,cb) decoration
        body "bodies/barret-fixHand-3.off" color (cr,cg,cb) decoration
        body "bodies/barret-fixHand-4.off" color (cr,cg,cb) decoration
        body "bodies/barret-fixHand-5.off" color (cr,cg,cb) decoration
        body "bodies/barret-fixHand-6.off" color (cr,cg,cb) decoration
        body "bodies/barret-fixHand-7.off" color (cr,cg,cb) decoration
        body "bodies/barret-fixHand-8.off" color (cr,cg,cb) decoration
        body "bodies/barret-fixHand-9.off" color (cr,cg,cb) decoration
        body "bodies/barret-fixHand-10.off" color (cr,cg,cb) decoration
        cylinder 0.05 (0,0,0.05) (0,0,0.15) green decoration
        % stick in arm
        cylinder 0.005 (0,0.02,0.17) (0,-0.350,0.17) 
        sphere 0.015 (0,0.02,0.17) black decoration

[JOINTS]

  fix: world maze Txyz(0.77,-0.14,-0.346)*Rz(Pi/2)

  fix: world arm0 Txyz(-0.22,-0.14,-0.346)

  revolute: arm0 (0.22,0.14,0.346)+(0,0,1)
            arm1 (0,0,0)+(0,0,1)
            %range [theta1-range1,theta1+range1]
            %      +(1,0,0)
            %      +(1,0,0)

  revolute: arm1 (0,0,0)+(0,1,0)
            arm2 (0,0,0)+(0,0,1)
            %range [theta2-range2,theta2+range2]
            %      +(1,0,0)
            %      +(1,0,0)

  revolute: arm2 (0,0,0)+(0,1,0)
            arm3 (0,0,0)+(0,0,-1)
            %range [theta3-range3,theta3+range3]
            %      +(1,0,0)
            %      +(1,0,0)

  revolute: arm3 (0.045,0,0.55)+(0,1,0)
            arm4 (0,0,0)+(0,0,1)
            %range [theta4-range4,theta4+range4]
            %      +(1,0,0)
            %      +(1,0,0)

  revolute: arm4 (-0.045,0,0)+(0,1,0)
            arm5 (0,0,0)+(0,0,-1)
            %range [theta5-range5,theta5+range5]
            %      +(1,0,0)
            %      +(1,0,0)

  revolute: arm5 (0,0,0.3)+(0,1,0)
            arm6 (0,0,0)+(0,0,1)
            %range [theta6-range6,theta6+range6]
            %      +(1,0,0)
            %      +(1,0,0)

  revolute: arm6 (0,0,0)+(0,1,0)
            arm7 (0,0,0)+(0,0,-1)
            %range [theta7-range7,theta7+range7]
            %      +(1,0,0)
            %      +(1,0,0)

  in_patch: arm7 (0,-0.350,0.17)+(0,-1,0)
      	    world (0.43, -0.2886, -0.356)
  	          (0.87, -0.2886, -0.356)
	          (0.43,  0.2314, -0.356)
	    	  (0.87,  0.2314, -0.356)

[COLLISIONS]

  Do not check: all
  Check : arm7,maze
  Check : arm7,maze
  Check : arm3,arm4
  Check : arm3,arm7
  Check : arm4,arm7


/** \endcond */

/**
   \file BarretArm-Maze.world

   \brief The Barret arm holding a stick to solve a maze problem.

   <center>
   <img src="../images/Barret/BarretMaze.png">
   </center>

   The Barret arm holding a stick to solve a maze problem. In this case
   the orientation of the end effector can change. 

   Note that in this example we do not take into account the joint limits.
   They can be activated, though, uncommenting the corresponding lines.

   The key data for this problem are:
   <center>
   <table>
     <tr>
       <th>Ambient space dimension</th> <td align="center"> 10 </td>
     </tr>
     <tr>
       <th>Configuration space dimension</th> <td align="center"> 4 </td>
     </tr>
     <tr>
       <th>Average planning time with \ref cuikatlasrrt.c  "bin/cuikatlasrrt" (in seconds)</th> <td align="center"> 30 </td>
     </tr>
   </table>
   </center>

   This example is treated following this steps (from the main CuikSuite folder):

      - <b>Solve the path planning problem</b>: Execute 
             - <i>\ref cuikatlasrrt.c  "bin/cuikatlasrrt" examples/Barret/BarretArm-Maze</i>
	     .    
      - <b>An alternative way to plan</b>: Note that different path planning algorithms use different
        parameter settins. Just uncomment the right lines in the parameter file. In particular, deactivate the
        bifurcation detection (set \ref CT_DETECT_BIFURCATIONS "DETECT_BIFURCATIONS" to 0) and execute:
             - <i>\ref cuikatlasGBF.c  "bin/cuikatlasGBF" examples/Barret/BarretArm-Maze</i>
	     .
      - <b>An alternative ways to plan existing in the literature</b>: 
             - <i>\ref cuikcbirrt.c  "bin/cuikcbirrt" examples/Barret/BarretArm-Maze</i>
             - <i>\ref cuikccrrt.c  "bin/cuikccrrt" examples/Barret/BarretArm-Maze</i>
	     .
      - <b>Visualize the path</b>: Whatever the procedure used to plan
	     - <i>\ref cuikplay.c "scripts/cuikplayer" examples/Barret/BarretArm-Maze examples/Barret/BarretArm-Maze_path</i>
	     .
      - <b>To smooth an output path</b>: 
             - <i>\ref cuiksmoothpath.c  "bin/cuiksmoothpath" examples/Barret/BarretArm-Maze</i>
	     .
      - <b>Visualize the smoothed path</b>: 
	     - <i>\ref cuikplay.c "scripts/cuikplayer" examples/Barret/BarretArm-Maze examples/Barret/BarretArm-Maze_path_s</i>
	     .
      .
*/